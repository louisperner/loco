"use strict";const c=require("electron");c.contextBridge.exposeInMainWorld("ipcRenderer",l(c.ipcRenderer));c.contextBridge.exposeInMainWorld("electron",{saveModelFile:async(e,r)=>new Promise((i,s)=>{const t=new FileReader;t.onload=async o=>{try{if(!o.target||!o.target.result){s(new Error("Failed to read file"));return}const n=o.target.result,a=await c.ipcRenderer.invoke("save-model-file",n,r);i(a)}catch(n){s(n)}},t.onerror=o=>s(o),t.readAsArrayBuffer(e)}),saveImageFile:async(e,r)=>new Promise((i,s)=>{const t=new FileReader;t.onload=async o=>{try{if(!o.target||!o.target.result){s(new Error("Failed to read file"));return}const n=o.target.result,a=await c.ipcRenderer.invoke("save-image-file",n,r);i(a)}catch(n){s(n)}},t.onerror=o=>s(o),t.readAsArrayBuffer(e)}),testFileAccess:async e=>{try{let r=e;return r.startsWith("file://")?r=r.substring(7):r.startsWith("app-file://")&&(r=r.substring(11)),{success:!0,exists:await c.ipcRenderer.invoke("test-file-access",r)}}catch(r){return{success:!1,error:r.message}}},loadFileAsBlob:async e=>{try{let r=e;r.startsWith("file://")?r=r.substring(7):r.startsWith("app-file://")&&(r=r.substring(11));const i=await c.ipcRenderer.invoke("read-file-as-buffer",r),s=new Blob([i]);return{success:!0,blobUrl:URL.createObjectURL(s)}}catch(r){return{success:!1,error:r.message}}},loadImageFromAppFile:async e=>{try{if(e.startsWith("blob:"))return{success:!0,url:e};if(e.startsWith("app-file://")){const r=e.substring(11),i=await c.ipcRenderer.invoke("read-file-as-buffer",decodeURI(r)),s=r.split(".").pop().toLowerCase();let t="application/octet-stream";s==="jpg"||s==="jpeg"?t="image/jpeg":s==="png"?t="image/png":s==="gif"?t="image/gif":s==="webp"?t="image/webp":s==="svg"&&(t="image/svg+xml");const o=new Blob([i],{type:t}),n=URL.createObjectURL(o);return window._imageBlobCache=window._imageBlobCache||{},window._imageBlobCache[e]=n,{success:!0,url:n}}return{success:!0,url:e}}catch(r){return console.error("Error loading image from app-file:",r),{success:!1,error:r.message,url:e}}},loadVideoFromAppFile:async e=>{try{if(e.startsWith("blob:"))return{success:!0,url:e};if(e.startsWith("app-file://")||e.startsWith("file://")){const r=e.startsWith("app-file://")?"app-file://":"file://",i=e.substring(r.length),s=await c.ipcRenderer.invoke("read-file-as-buffer",decodeURI(i)),t=i.split(".").pop().toLowerCase();let o="application/octet-stream";t==="mp4"?o="video/mp4":t==="webm"?o="video/webm":t==="mov"?o="video/quicktime":t==="avi"?o="video/x-msvideo":t==="mkv"&&(o="video/x-matroska");const n=new Blob([s],{type:o}),a=URL.createObjectURL(n);return window._videoBlobCache=window._videoBlobCache||{},window._videoBlobCache[e]=a,{success:!0,url:a}}return{success:!0,url:e}}catch(r){return console.error("Error loading video from app-file:",r),{success:!1,error:r.message,url:e}}},saveVideoFile:async(e,r)=>{try{const s=await new Blob([e]).arrayBuffer();return await c.ipcRenderer.invoke("save-video-file",new Uint8Array(s),r)}catch(i){throw console.error("Error saving video file:",i),i}},listVideosFromDisk:async()=>{try{return await c.ipcRenderer.invoke("list-videos-from-disk")}catch(e){return console.error("Error listing videos from disk:",e),{success:!1,videos:[],error:e.message}}}});function l(e){const r=Object.getPrototypeOf(e);for(const[i,s]of Object.entries(r))Object.prototype.hasOwnProperty.call(e,i)||(typeof s=="function"?e[i]=function(...t){return s.call(e,...t)}:e[i]=s);return e}
