import React, { useEffect, useState, useRef } from 'react';
import { Canvas, useThree, useFrame } from '@react-three/fiber';
import { Html, Grid, OrbitControls, Plane, Text } from '@react-three/drei';
import * as THREE from 'three';
import { useCodeStore } from '../../store/CodeStore';
import WebFrames from './WebFrames';
import Spotlight from './Spotlight';
import FPSControls from './FPSControls';
import ImageCloneManager from './ImageCloneManager';
import MessageManager from './MessageManager';
import { useImageStore } from '../../store/useImageStore';
import { SettingsPanel, Button, Switch, Slider } from '@/components/ui';
import { RgbaColorPicker, RgbaStringColorPicker } from 'react-colorful';
import { FaTimes, FaUndo, FaPalette, FaSlidersH, FaCheck, FaChevronRight, FaMagic, FaLayerGroup, FaAdjust, FaEye, FaEyeSlash, FaExpand, FaInfinity } from 'react-icons/fa';
import { useThemeStore } from '../../store/ThemeStore';

// Componente de mira redonda para o centro da tela
  );
}

// Componente de mira para o centro da tela com diferentes estilos
function Crosshair({ visible = true, size = 5, color = 'white', thickness = 1, style = 'circle' }) {
  if (!visible) return null;
  
  // Estilos de mira diferentes
  switch (style) {
    case 'circle': // Mira circular
      return (
        <div
          className={`absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full border pointer-events-none z-[1000] bg-transparent`}
          style={{
            width: `${size}px`,
            height: `${size}px`,
            borderWidth: `${thickness}px`,
            borderColor: color
          }}
        />
      );
    
    case 'dot': // Ponto central
      return (
        <div
          className={`absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full pointer-events-none z-[1000]`}
          style={{
            width: `${size/2}px`,
            height: `${size/2}px`,
            backgroundColor: color
          }}
        />
      );
    
    case 'cross': // Cruz simples
      return (
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 pointer-events-none z-[1000]">
          <div 
            style={{
              position: 'absolute',
              width: `${size}px`,
              height: `${thickness}px`,
              backgroundColor: color,
              left: `${-size/2}px`,
              top: `${-thickness/2}px`
            }}
          />
          <div 
            style={{
              position: 'absolute',
              width: `${thickness}px`,
              height: `${size}px`,
              backgroundColor: color,
              left: `${-thickness/2}px`,
              top: `${-size/2}px`
            }}
          />
        </div>
      );
    
    case 'plus': // Cruz com espa√ßo no centro
      const gap = size / 4;
      return (
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 pointer-events-none z-[1000]">
          {/* Linha horizontal esquerda */}
          <div 
            style={{
              position: 'absolute',
              width: `${size/2 - gap}px`,
              height: `${thickness}px`,
              backgroundColor: color,
              right: `${gap + thickness/2}px`,
              top: `${-thickness/2}px`
            }}
          />
          {/* Linha horizontal direita */}
          <div 
            style={{
              position: 'absolute',
              width: `${size/2 - gap}px`,
              height: `${thickness}px`,
              backgroundColor: color,
              left: `${gap + thickness/2}px`,
              top: `${-thickness/2}px`
            }}
          />
          {/* Linha vertical superior */}
          <div 
            style={{
              position: 'absolute',
              width: `${thickness}px`,
              height: `${size/2 - gap}px`,
              backgroundColor: color,
              left: `${-thickness/2}px`,
              bottom: `${gap + thickness/2}px`
            }}
          />
          {/* Linha vertical inferior */}
          <div 
            style={{
              position: 'absolute',
              width: `${thickness}px`,
              height: `${size/2 - gap}px`,
              backgroundColor: color,
              left: `${-thickness/2}px`,
              top: `${gap + thickness/2}px`
            }}
          />
        </div>
      );
      
    default:
      return null;
  }
}

function Floor({ gridVisible, floorPlaneVisible, groundSize = 30, isInfinite = false }) {
  const gridColor = useThemeStore(state => state.gridColor);
  const floorPlaneColor = useThemeStore(state => state.floorPlaneColor);
  const gridOpacity = useThemeStore(state => state.gridOpacity);
  const floorPlaneOpacity = useThemeStore(state => state.floorPlaneOpacity);
  const getColorWithOpacity = useThemeStore(state => state.getColorWithOpacity);
  
  const gridColorWithOpacity = getColorWithOpacity(gridColor, gridOpacity);
  const floorPlaneColorWithOpacity = getColorWithOpacity(floorPlaneColor, floorPlaneOpacity);
  
  // Use the same size for both grid and plane, whether infinite or not
  const size = isInfinite ? 10 : groundSize;
  const fadeDistance = isInfinite ? 100 : groundSize;
  
  return (
    <>
      {gridVisible && (
        <Grid
          args={[size, size]}
          cellSize={1}
          cellThickness={1}
          cellColor={gridColorWithOpacity}
          sectionSize={5}
          sectionThickness={1.5}
          sectionColor={gridColorWithOpacity}
          fadeDistance={fadeDistance}
          fadeStrength={isInfinite ? 0.5 : 1}
          followCamera={isInfinite}
          position={[0, 0.1, 0]}
          infiniteGrid={isInfinite}
        />
      )}
      {floorPlaneVisible && (
        <Plane 
          args={[size, size]} 
          rotation={[-Math.PI / 2, 0, 0]} 
          position={[0, 0, 0]}
          receiveShadow
        >
          <meshStandardMaterial 
            color={floorPlaneColor}
            opacity={floorPlaneOpacity / 100}
            transparent={true}
          />
        </Plane>
      )}
    </>
  );
}

function getFramePositionAndRotation(camera) {
  const direction = new THREE.Vector3(0, 0, -1);
  direction.applyQuaternion(camera.quaternion);
  
  const position = new THREE.Vector3();
  position.copy(camera.position);
  
  direction.multiplyScalar(3);
  position.add(direction);
  
  position.y = Math.max(-1, Math.min(3, position.y));

  const euler = new THREE.Euler().setFromQuaternion(camera.quaternion);
  
  return {
    position: [position.x, position.y, position.z],
    rotation: [euler.x, euler.y, euler.z]
  };
}

// Frame rate limiter component that limits to 60 FPS
function FrameRateLimiter() {
  const frameInterval = 1000 / 60; // 60 fps
  const lastUpdate = useRef(0);
  
  useFrame(({ gl, scene, camera }) => {
    const now = performance.now();
    const delta = now - lastUpdate.current;
    
    if (delta < frameInterval) {
      // Skip this frame
      return;
    }
    
    // Update last render time, accounting for any extra time
    lastUpdate.current = now - (delta % frameInterval);
  }, 0); // Priority 0 ensures this runs before other useFrame hooks
  
  return null;
}

function PreviewFrame({ isVisible, onPositionConfirm, isPositionConfirmed, hasPendingWebsite }) {
  const { camera } = useThree();
  const groupRef = useRef();
  const [position, setPosition] = useState([0, 0, 0]);
  const [rotation, setRotation] = useState([0, 0, 0]);

  useFrame(() => {
    if (!isVisible || !groupRef.current || isPositionConfirmed) return;
    const { position: newPosition, rotation: newRotation } = getFramePositionAndRotation(camera);
    setPosition(newPosition);
    setRotation(newRotation);
  });

  useEffect(() => {
    if (!isVisible) return;

    const handleClick = () => {
      if (!isPositionConfirmed) {
        onPositionConfirm(position, rotation);
      }
    };

    window.addEventListener('click', handleClick);
    return () => window.removeEventListener('click', handleClick);
  }, [isVisible, position, rotation, onPositionConfirm, isPositionConfirmed]);

  if (!isVisible) return null;

  return (
    <group 
      ref={groupRef} 
      position={position}
      rotation={rotation}
    >
      <mesh position={[0, 0, 0]}>
        <planeGeometry args={[3.1, 2.1]} />
        <meshBasicMaterial 
          color={isPositionConfirmed ? "#22c55e" : "#3b82f6"}
          transparent
          opacity={0.3}
          side={THREE.DoubleSide}
        />
      </mesh>
      <mesh position={[0, 0, 0.01]}>
        <planeGeometry args={[3, 2]} />
        <meshBasicMaterial 
          color={isPositionConfirmed ? "#4ade80" : "#60a5fa"}
          wireframe
          transparent
          opacity={0.8}
          side={THREE.DoubleSide}
        />
      </mesh>
      {[[-1.5, 1], [1.5, 1], [-1.5, -1], [1.5, -1]].map((pos, i) => (
        <group key={i} position={[pos[0], pos[1], 0]}>
          <mesh position={[0, 0, 0]}>
            <boxGeometry args={[0.1, 0.1, 0.1]} />
            <meshBasicMaterial color={isPositionConfirmed ? "#22c55e" : "#3b82f6"} />
          </mesh>
          <mesh position={[0, 0, -0.15]}>
            <boxGeometry args={[0.02, 0.02, 0.3]} />
            <meshBasicMaterial color={isPositionConfirmed ? "#22c55e" : "#3b82f6"} opacity={0.5} transparent />
          </mesh>
        </group>
      ))}
      <mesh position={[0, 0, -0.15]}>
        <boxGeometry args={[0.05, 0.05, 0.3]} />
        <meshBasicMaterial color={isPositionConfirmed ? "#22c55e" : "#3b82f6"} opacity={0.3} transparent />
      </mesh>
      
      {hasPendingWebsite && !isPositionConfirmed && (
        <Html position={[0, -1.3, 0]} center>
          <div className="bg-black bg-opacity-70 text-white px-3 py-1 rounded-full text-sm whitespace-nowrap">
            Clique para posicionar aqui
          </div>
        </Html>
      )}
    </group>
  );
}

function FrameManager({ onAddFrame }) {
  const { camera } = useThree();
  
  React.useEffect(() => {
    window.addFrameAtPosition = (url) => {
      const { position, rotation } = getFramePositionAndRotation(camera);
      onAddFrame(url, position, rotation);
    };
  }, [camera, onAddFrame]);
  
  return null;
}

function CameraExposer() {
  const { camera } = useThree();
  
  useEffect(() => {
    window.mainCamera = camera;
    return () => {
      window.mainCamera = undefined;
    };
  }, [camera]);
  
  return null;
}

const Player = () => {
  const iframeRef = useRef();
  const canvasContainerRef = useRef();
  const { updateCode, updateTranspiledCode, updateComponents } = useCodeStore();
  const { code } = useCodeStore();
  const [frames, setFrames] = useState([]);
  const [showPreview, setShowPreview] = useState(false);
  const [confirmedPosition, setConfirmedPosition] = useState(null);
  const [confirmedRotation, setConfirmedRotation] = useState(null);
  const [finalCode, setFinalCode] = useState(`function Application() {
    return (
      <div>
        <h1>Teste 1</h1>
      </div>
    );
  }
  render(<Application />);`);
  
  const [currentMode, setCurrentMode] = useState('live');
  const [showCatalog, setShowCatalog] = useState(false);
  const [movementEnabled, setMovementEnabled] = useState(true);
  const [showHelp, setShowHelp] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  
  const [pendingWebsiteUrl, setPendingWebsiteUrl] = useState(null);
  const [showFrameControls, setShowFrameControls] = useState(true);
  const [selectedFrame, setSelectedFrame] = useState(null);
  const [positionOffset, setPositionOffset] = useState({ x: 0, y: 0, z: 0 });
  const [activeTab, setActiveTab] = useState('cores');
  const [isResetAnimating, setIsResetAnimating] = useState(false);
  const [colorChanged, setColorChanged] = useState(null);
  const [canvasInteractive, setCanvasInteractive] = useState(true);
  const [showColorPicker, setShowColorPicker] = useState(null);
  const [selectedTheme, setSelectedTheme] = useState(null);
  const colorPickerRefs = useRef({});
  const settingsPanelRef = useRef(null);
  const [mouseOverSettings, setMouseOverSettings] = useState(false);
  
  // Estados para controlar a visibilidade de cada elemento
  const [floorVisible, setFloorVisible] = useState(true);
  const [gridVisible, setGridVisible] = useState(true);
  const [floorPlaneVisible, setFloorPlaneVisible] = useState(true);
  const [backgroundVisible, setBackgroundVisible] = useState(true);
  
  // Estados para a mira (crosshair)
  const [showCrosshair, setShowCrosshair] = useState(true);
  const [crosshairSize, setCrosshairSize] = useState(10);
  const [crosshairColor, setCrosshairColor] = useState('white');
  const [crosshairThickness, setCrosshairThickness] = useState(2);
  const [crosshairStyle, setCrosshairStyle] = useState('circle');
  
  // Obter fun√ß√µes e estados da ThemeStore
  const { 
    gridColor, 
    backgroundColor,
    floorPlaneColor,
    gridOpacity,
    backgroundOpacity,
    floorPlaneOpacity,
    setGridColor,
    setBackgroundColor,
    setFloorPlaneColor,
    setGridOpacity,
    setBackgroundOpacity,
    setFloorPlaneOpacity,
    getColorWithOpacity,
    resetColors,
    groundSize,
    isGroundInfinite,
    setGroundSize,
    setGroundInfinite
  } = useThemeStore();

  // Adicione este estado se n√£o estiver no ThemeStore ainda
  const [gravityEnabled, setGravityEnabled] = useState(false);

  useEffect(() => {
    const savedFrames = localStorage.getItem('webview-frames');
    if (savedFrames) {
      try {
        const parsedFrames = JSON.parse(savedFrames);
        setFrames(parsedFrames);
      } catch (error) {
        console.error('Error loading frames from localStorage:', error);
      }
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('webview-frames', JSON.stringify(frames));
  }, [frames]);

  const handleAddFrame = (url, pos, rot) => {
    const position = pos || confirmedPosition;
    const rotation = rot || confirmedRotation;
    
    if (!position || !rotation) return;

    setFrames(prevFrames => [...prevFrames, {
      id: Date.now(),
      url: url,
      position: position,
      rotation: rotation,
      originalPosition: position,
      originalRotation: rotation
    }]);
    
    setConfirmedPosition(null);
    setConfirmedRotation(null);
    setShowPreview(false);
    setPendingWebsiteUrl(null);
  };

  const handleSpotlightVisibility = (isVisible) => {
    setShowPreview(isVisible);
    if (!isVisible) {
      setConfirmedPosition(null);
      setConfirmedRotation(null);
    }
  };

  const handlePositionConfirm = (position, rotation) => {
    setConfirmedPosition(position);
    setConfirmedRotation(rotation);
    
    if (pendingWebsiteUrl) {
      setTimeout(() => {
        handleAddFrame(pendingWebsiteUrl, position, rotation);
      }, 300);
    }
  };
  
  const handleModeChange = (mode) => {
    setCurrentMode(mode);
    
    setMovementEnabled(mode === 'live');
    
    if (mode === 'build') {
      setShowPreview(true);
      setConfirmedPosition(null);
      setConfirmedRotation(null);
    } else {
      setShowPreview(false);
      if (pendingWebsiteUrl) {
        setPendingWebsiteUrl(null);
      }
      setConfirmedPosition(null);
      setConfirmedRotation(null);
    }
  };
  
  const handleOpenCatalog = () => {
    setShowCatalog(true);
    setMovementEnabled(false);
  };
  
  const handleCloseCatalog = () => {
    setShowCatalog(false);
    setMovementEnabled(true);
  };
  
  const handleToggleHelp = () => {
    setShowHelp(!showHelp);
    setMovementEnabled(showHelp);
  };
  
  const handleCancel = () => {
    if (currentMode === 'build') {
      if (pendingWebsiteUrl) {
        setPendingWebsiteUrl(null);
        setConfirmedPosition(null);
        setConfirmedRotation(null);
      } else {
        handleModeChange('live');
      }
    }
  };
  
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.metaKey && e.key === 'b') {
        e.preventDefault();
        setShowCatalog(prev => !prev);
        setMovementEnabled(!showCatalog);
      }
      
      if (e.key === 'F1') {
        e.preventDefault();
        handleToggleHelp();
      }
      
      if (e.key === '1') {
        handleModeChange('live');
      } else if (e.key === '2') {
        handleModeChange('build');
      }
      
      if (e.key === 'Escape') {
        handleCancel();
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [showCatalog, showHelp, currentMode, pendingWebsiteUrl]);

  async function refreshData() {
    await refreshComponents();

    onSnapshot(collection(db, `3Deditor`), (snapshot) => {
      snapshot.forEach((doc) => {
        const code = doc.data().code;
        const formated = generateCode(code);

        const components = JSON.parse(localStorage.getItem('components'));
        updateComponents(components);
        updateCode(code);
        updateTranspiledCode(formated);
      });
    });
  }

  async function refreshComponents() {
    let components = '';

    onSnapshot(collection(db, `components`), (snapshot) => {
      snapshot.forEach((doc) => {
        components += doc.data().code + ';';
      });
      localStorage.setItem(`components`, JSON.stringify(components));
    });
  }

  useEffect(() => {
    if (code !== '') {
      setFinalCode(`${code} render(<Application />);`);
    }
  }, [code]);

  const handleBoxFrameMediaDrag = (mediaData) => {
    console.log('üì± Media drag detectado:', mediaData);
  };
  
  const handleCloseFrame = (frameId) => {
    setFrames(prevFrames => prevFrames.filter(frame => frame.id !== frameId));
  };
  
  const handleClearAllFrames = () => {
    setFrames([]);
    
    const { clearImages } = useImageStore.getState();
    if (clearImages) {
      clearImages();
    }
  };
  
  const handleLoadSavedFrames = (savedFrames) => {
    console.log('Loading saved frames:', savedFrames);
    setFrames(savedFrames);
  };
  
  const handleRestoreFramePosition = (frameId) => {
    setFrames(prevFrames => prevFrames.map(frame => {
      if (frame.id === frameId && frame.originalPosition && frame.originalRotation) {
        return {
          ...frame,
          position: frame.originalPosition,
          rotation: frame.originalRotation
        };
      }
      return frame;
    }));
  };

  const handleFrameMove = (frameId, newPosition, newRotation) => {
    setFrames(prevFrames => prevFrames.map(frame =>
      frame.id === frameId ? { ...frame, position: newPosition, rotation: newRotation } : frame
    ));
  };

  const handleFrameClose = (frameId) => {
    setSelectedFrame(null);
    handleCloseFrame(frameId);
  };

  const toggleSettings = () => {
    const newState = !showSettings;
    setShowSettings(newState);
    // Desabilitar intera√ß√£o do canvas quando as configura√ß√µes estiverem abertas
    setCanvasInteractive(!newState);
  };
  
  // Prevenir propaga√ß√£o de eventos
  const handlePanelClick = (e) => {
    e.stopPropagation();
  };
  
  // Converter cores para formato RGBA
  const hexToRgba = (hex, alpha = 1) => {
    if (hex === 'transparent') return { r: 0, g: 0, b: 0, a: 0 };
    
    // Remover o # se existir
    hex = hex.replace('#', '');
    
    // Converter cores de 3 d√≠gitos para 6 d√≠gitos
    if (hex.length === 3) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    }
    
    // Converter para RGB
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    
    return { r, g, b, a: alpha };
  };
  
  // Converter objeto RGBA para string
  const rgbaToString = (rgba) => {
    return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;
  };
  
  // Converter string RGBA para objeto
  const stringToRgba = (rgbaStr) => {
    if (rgbaStr === 'transparent') return { r: 0, g: 0, b: 0, a: 0 };
    
    const match = rgbaStr.match(/rgba\((\d+),\s*(\d+),\s*(\d+),\s*([\d.]+)\)/);
    if (match) {
      return {
        r: parseInt(match[1]),
        g: parseInt(match[2]),
        b: parseInt(match[3]),
        a: parseFloat(match[4])
      };
    }
    
    // Fallback para hex
    return hexToRgba(rgbaStr);
  };

  const handleColorChange = (type, color) => {
    const colorValue = typeof color === 'string' ? color : rgbaToString(color);
    
    if (type === 'grid') {
      setGridColor(colorValue);
      if (colorValue === 'transparent' || (typeof color === 'object' && color.a === 0)) {
        setGridOpacity(0);
      } else if (typeof color === 'object') {
        setGridOpacity(Math.round(color.a * 100));
      }
    } else if (type === 'floorPlane') {
      setFloorPlaneColor(colorValue);
      if (colorValue === 'transparent' || (typeof color === 'object' && color.a === 0)) {
        setFloorPlaneOpacity(0);
      } else if (typeof color === 'object') {
        setFloorPlaneOpacity(Math.round(color.a * 100));
      }
    } else if (type === 'background') {
      setBackgroundColor(colorValue);
      if (colorValue === 'transparent' || (typeof color === 'object' && color.a === 0)) {
        setBackgroundOpacity(0);
      } else if (typeof color === 'object') {
        setBackgroundOpacity(Math.round(color.a * 100));
      }
    }
    
    // Mostra feedback visual
    setColorChanged(type);
    setTimeout(() => setColorChanged(null), 500);
  };
  
  const handleResetColors = () => {
    resetColors();
    setIsResetAnimating(true);
    setColorChanged('all');
    setTimeout(() => {
      setIsResetAnimating(false);
      setColorChanged(null);
    }, 1000);
  };
  
  const applyTheme = (theme) => {
    setGridColor(theme.grid);
    setBackgroundColor(theme.bg);
    setFloorPlaneColor(theme.floorPlane || "#191f2a80");
    setSelectedTheme(theme.id);
    
    // Reset opacities
    setGridOpacity(40);
    setFloorPlaneOpacity(80);
    setBackgroundOpacity(100);
    
    // Show visual feedback
    setColorChanged('all');
    setTimeout(() => setColorChanged(null), 1000);
  };

  // Adicione uma fun√ß√£o para gerar um estilo de cor com verifica√ß√£o de transpar√™ncia
  const getButtonColorStyle = (color) => {
    if (color === 'transparent') {
      return {
        backgroundColor: 'transparent',
        backgroundImage: 'linear-gradient(45deg, #ccc 25%, transparent 25%, transparent 75%, #ccc 75%, #ccc), linear-gradient(45deg, #ccc 25%, transparent 25%, transparent 75%, #ccc 75%, #ccc)',
        backgroundSize: '10px 10px',
        backgroundPosition: '0 0, 5px 5px'
      };
    }
    return { backgroundColor: color };
  };

  // Desabilitar canvas quando o seletor de cores estiver aberto ou quando mouse estiver sobre painel de config
  useEffect(() => {
    setCanvasInteractive(!showColorPicker && !mouseOverSettings);
  }, [showColorPicker, mouseOverSettings]);
  
  // Tratar entrada e sa√≠da do mouse no painel de configura√ß√µes
  const handleMouseEnterSettings = () => {
    setMouseOverSettings(true);
    setCanvasInteractive(false);
  };
  
  const handleMouseLeaveSettings = () => {
    // S√≥ reativamos o canvas se n√£o houver seletor de cores aberto
    if (!showColorPicker) {
      setMouseOverSettings(false);
      setCanvasInteractive(true);
    }
  };
  
  // Tratar cliques fora do seletor de cores
  useEffect(() => {
    if (!showColorPicker) return;
    
    const handleClickOutside = (event) => {
      // Verificar se o clique foi em algum bot√£o de seletor de cor
      // Se for, n√£o fechar o seletor (o estado j√° ser√° alterado pelo bot√£o)
      const isColorPickerButton = event.target.closest('[data-color-picker-btn]');
      if (isColorPickerButton) return;
      
      // Verificar se o clique foi fora do seletor atual
      const currentRef = colorPickerRefs.current[showColorPicker];
      if (currentRef && !currentRef.contains(event.target)) {
        setShowColorPicker(null);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showColorPicker]);

  // Adicionar l√≥gica para atualizar o tamanho do ground e o modo infinito
  const handleGroundSizeChange = (value) => {
    setGroundSize(value[0]);
  };
  
  const handleGroundInfiniteToggle = (value) => {
    setGroundInfinite(value);
  };

  return (
    <div 
      ref={canvasContainerRef}
      className="w-screen h-screen relative"
      style={{ 
        backgroundColor: backgroundVisible ? getColorWithOpacity(backgroundColor, backgroundOpacity) : 'transparent'
      }}
    >
      <Canvas 
        camera={{ position: [0, 0, 0], fov: 65 }} 
        className={`z-0 ${canvasInteractive ? '' : 'pointer-events-none'}`}
        frameloop="always"
        onPointerMissed={() => setSelectedFrame(null)}
      >
        <FrameRateLimiter />
        <ambientLight intensity={0.8} />
        <directionalLight castShadow position={[2.5, 8, 5]} intensity={1.5} shadow-mapSize={1024} />
        <FPSControls 
          speed={5} 
          enabled={movementEnabled} 
          gravityEnabled={gravityEnabled} 
          floorHeight={0} 
          initialPosition={[0, 1.7, 0]}
        />
        
        <CameraExposer />
        
        <ImageCloneManager />
        
        <WebFrames
          frames={frames}
          onMediaDragStart={handleBoxFrameMediaDrag}
          onCloseFrame={handleCloseFrame}
          onRestorePosition={handleRestoreFramePosition}
          onUpdateFrameUrl={(frameId, newUrl) => {
            setFrames(prevFrames => prevFrames.map(frame => 
              frame.id === frameId ? { ...frame, url: newUrl } : frame
            ));
          }}
          onLoadSavedFrames={handleLoadSavedFrames}
        />
        {showPreview && !confirmedPosition && (
          <PreviewFrame
            isVisible={showPreview}
            onPositionConfirm={handlePositionConfirm}
            isPositionConfirmed={!!confirmedPosition}
            hasPendingWebsite={pendingWebsiteUrl !== null}
          />
        )}
        <MessageManager />
        <Floor 
          gridVisible={gridVisible} 
          floorPlaneVisible={floorPlaneVisible} 
          groundSize={groundSize}
          isInfinite={isGroundInfinite}
        />
      </Canvas>
      
      {/* Settings slide panel with Shadcn UI */}
      <div 
        ref={settingsPanelRef}
        onMouseEnter={handleMouseEnterSettings}
        onMouseLeave={handleMouseLeaveSettings}
      >
        <SettingsPanel 
          onToggle={(isOpen) => {
            // Quando o painel √© fechado, resetamos os estados
            if (!isOpen) {
              setCanvasInteractive(true);
              setShowColorPicker(null);
              setMouseOverSettings(false);
            } else {
              // Quando o painel √© aberto, desativamos o canvas
              setCanvasInteractive(false);
              setMouseOverSettings(true);
            }
          }}
        >
          <div className="space-y-4">
            {/* Tabs - more compact */}
            <div className="flex mb-2 p-1 bg-white/10 rounded-lg">
              <Button 
                variant={activeTab === 'cores' ? 'default' : 'ghost'}
                className={`flex-1 py-1 px-2 text-xs font-medium ${
                  activeTab === 'cores' 
                    ? 'bg-white text-black shadow-sm' 
                    : 'text-white/70 hover:text-white/90 hover:bg-white/10'
                }`}
                onClick={() => setActiveTab('cores')}
              >
                <FaPalette className={`mr-1 ${activeTab === 'cores' ? 'text-black' : ''}`} size={10} />
                Appearance
              </Button>
              <Button 
                variant={activeTab === 'controles' ? 'default' : 'ghost'}
                className={`flex-1 py-1 px-2 text-xs font-medium ${
                  activeTab === 'controles' 
                    ? 'bg-white text-black shadow-sm' 
                    : 'text-white/70 hover:text-white/90 hover:bg-white/10'
                }`}
                onClick={() => setActiveTab('controles')}
              >
                <FaSlidersH className={`mr-1 ${activeTab === 'controles' ? 'text-black' : ''}`} size={10} />
                Controls
              </Button>
            </div>
            
            {/* Appearance Tab Content */}
            {activeTab === 'cores' && (
              <div className="space-y-2 animate-fadeIn">
                {/* Color Options with react-colorful */}
                <div className="bg-white/5 rounded-lg p-3 space-y-3">
                  <div className="flex justify-between items-center mb-2">
                    <h3 className="text-xs font-medium text-white/90">Color Adjustments</h3>
                    <button 
                      onClick={handleResetColors}
                      className={`text-blue-400 hover:text-blue-300 flex items-center text-xs transition-colors duration-200 rounded-full px-2 py-0.5 hover:bg-blue-900/20 ${isResetAnimating ? 'animate-pulse' : ''}`}
                      title="Restore default colors"
                    >
                      <FaUndo className="mr-1" size={8} /> Reset
                    </button>
                  </div>
                  
                  {/* Grid Color Selector with react-colorful */}
                  <div className="bg-black/20 rounded-md overflow-hidden">
                    <div className="flex items-center justify-between p-2.5">
                      <div className="text-sm text-white/80 font-medium">Grid</div>
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => setGridVisible(!gridVisible)}
                          className={`w-7 h-7 rounded-full flex items-center justify-center ${gridVisible ? 'text-white/80 hover:text-white' : 'text-white/30 hover:text-white/50'}`}
                          title={gridVisible ? "Hide grid" : "Show grid"}
                        >
                          {gridVisible ? <FaEye size={14} /> : <FaEyeSlash size={14} />}
                        </button>
                        <button 
                          onClick={() => setShowColorPicker(showColorPicker === 'grid' ? null : 'grid')}
                          className={`w-7 h-7 rounded-full border-2 ${showColorPicker === 'grid' ? 'border-white' : 'border-white/30'} overflow-hidden cursor-pointer transition-all duration-200 hover:scale-110`}
                          style={getButtonColorStyle(gridColor)}
                          title="Select grid color"
                          data-color-picker-btn="grid"
                        />
                      </div>
                    </div>
                    
                    {/* Color picker dropdown */}
                    {showColorPicker === 'grid' && (
                      <div 
                        ref={el => colorPickerRefs.current.grid = el} 
                        className="p-3 border-t border-white/10 relative"
                        onClick={e => e.stopPropagation()}
                      >
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-sm font-medium text-white/90">Grid Color</span>
                          <div className="flex gap-2">
                            <button 
                              className="bg-transparent hover:bg-white/10 p-1.5 rounded text-white/80 flex items-center border border-white/20"
                              onClick={() => {
                                handleColorChange('grid', 'transparent');
                              }}
                              title="Set transparent"
                            >
                              <FaEyeSlash size={12} className="mr-1.5" />
                              <span className="text-xs">Transparent</span>
                            </button>
                            <button 
                              className="bg-white/10 hover:bg-white/20 p-1.5 rounded text-white/80 flex items-center"
                              onClick={() => setShowColorPicker(null)}
                              title="Close color picker"
                            >
                              <FaTimes size={12} />
                            </button>
                          </div>
                        </div>
                        <div className="border border-white/10 rounded-md p-2 mb-3">
                          <RgbaColorPicker 
                            color={gridColor === 'transparent' ? { r: 255, g: 255, b: 255, a: 0 } : 
                                   stringToRgba(gridColor)}
                            onChange={(color) => handleColorChange('grid', color)} 
                            style={{ width: '100%' }}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Floor Plane Color Selector with react-colorful */}
                  <div className="bg-black/20 rounded-md overflow-hidden">
                    <div className="flex items-center justify-between p-2.5">
                      <div className="text-sm text-white/80 font-medium">Floor Plane</div>
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => setFloorPlaneVisible(!floorPlaneVisible)}
                          className={`w-7 h-7 rounded-full flex items-center justify-center ${floorPlaneVisible ? 'text-white/80 hover:text-white' : 'text-white/30 hover:text-white/50'}`}
                          title={floorPlaneVisible ? "Hide floor plane" : "Show floor plane"}
                        >
                          {floorPlaneVisible ? <FaEye size={14} /> : <FaEyeSlash size={14} />}
                        </button>
                        <button 
                          onClick={() => setShowColorPicker(showColorPicker === 'floorPlane' ? null : 'floorPlane')}
                          className={`w-7 h-7 rounded-full border-2 ${showColorPicker === 'floorPlane' ? 'border-white' : 'border-white/30'} overflow-hidden cursor-pointer transition-all duration-200 hover:scale-110`}
                          style={getButtonColorStyle(floorPlaneColor)}
                          title="Select floor plane color"
                          data-color-picker-btn="floorPlane"
                        />
                      </div>
                    </div>
                    
                    {/* Color picker dropdown */}
                    {showColorPicker === 'floorPlane' && (
                      <div 
                        ref={el => colorPickerRefs.current.floorPlane = el} 
                        className="p-3 border-t border-white/10 relative"
                        onClick={e => e.stopPropagation()}
                      >
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-sm font-medium text-white/90">Floor Plane Color</span>
                          <div className="flex gap-2">
                            <button 
                              className="bg-transparent hover:bg-white/10 p-1.5 rounded text-white/80 flex items-center border border-white/20"
                              onClick={() => {
                                handleColorChange('floorPlane', 'transparent');
                              }}
                              title="Set transparent"
                            >
                              <FaEyeSlash size={12} className="mr-1.5" />
                              <span className="text-xs">Transparent</span>
                            </button>
                            <button 
                              className="bg-white/10 hover:bg-white/20 p-1.5 rounded text-white/80 flex items-center"
                              onClick={() => setShowColorPicker(null)}
                              title="Close color picker"
                            >
                              <FaTimes size={12} />
                            </button>
                          </div>
                        </div>
                        <div className="border border-white/10 rounded-md p-2 mb-3">
                          <RgbaColorPicker 
                            color={floorPlaneColor === 'transparent' ? { r: 255, g: 255, b: 255, a: 0 } : 
                                   stringToRgba(floorPlaneColor)}
                            onChange={(color) => handleColorChange('floorPlane', color)} 
                            style={{ width: '100%' }}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Background Color Selector with react-colorful */}
                  <div className="bg-black/20 rounded-md overflow-hidden">
                    <div className="flex items-center justify-between p-2.5">
                      <div className="text-sm text-white/80 font-medium">Background</div>
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => setBackgroundVisible(!backgroundVisible)}
                          className={`w-7 h-7 rounded-full flex items-center justify-center ${backgroundVisible ? 'text-white/80 hover:text-white' : 'text-white/30 hover:text-white/50'}`}
                          title={backgroundVisible ? "Hide background" : "Show background"}
                        >
                          {backgroundVisible ? <FaEye size={14} /> : <FaEyeSlash size={14} />}
                        </button>
                        <button 
                          onClick={() => setShowColorPicker(showColorPicker === 'background' ? null : 'background')}
                          className={`w-7 h-7 rounded-full border-2 ${showColorPicker === 'background' ? 'border-white' : 'border-white/30'} overflow-hidden cursor-pointer transition-all duration-200 hover:scale-110`}
                          style={getButtonColorStyle(backgroundColor)}
                          title="Select background color"
                          data-color-picker-btn="background"
                        />
                      </div>
                    </div>
                    
                    {/* Color picker dropdown */}
                    {showColorPicker === 'background' && (
                      <div 
                        ref={el => colorPickerRefs.current.background = el} 
                        className="p-3 border-t border-white/10 relative"
                        onClick={e => e.stopPropagation()}
                      >
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-sm font-medium text-white/90">Background Color</span>
                          <div className="flex gap-2">
                            <button 
                              className="bg-transparent hover:bg-white/10 p-1.5 rounded text-white/80 flex items-center border border-white/20"
                              onClick={() => {
                                handleColorChange('background', 'transparent');
                              }}
                              title="Set transparent"
                            >
                              <FaEyeSlash size={12} className="mr-1.5" />
                              <span className="text-xs">Transparent</span>
                            </button>
                            <button 
                              className="bg-white/10 hover:bg-white/20 p-1.5 rounded text-white/80 flex items-center"
                              onClick={() => setShowColorPicker(null)}
                              title="Close color picker"
                            >
                              <FaTimes size={12} />
                            </button>
                          </div>
                        </div>
                        <div className="border border-white/10 rounded-md p-2 mb-3">
                          <RgbaColorPicker 
                            color={backgroundColor === 'transparent' ? { r: 255, g: 255, b: 255, a: 0 } : 
                                   stringToRgba(backgroundColor)}
                            onChange={(color) => handleColorChange('background', color)} 
                            style={{ width: '100%' }}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Ground Size and Infinite Mode Controls */}
                  <div className="bg-black/20 rounded-md overflow-hidden p-3 mt-4">
                    <h3 className="text-sm font-medium text-white/90 mb-3">Ground Settings</h3>
                    
                    {/* Ground Size Slider */}
                    <div className="mb-4">
                      <div className="flex justify-between items-center mb-1">
                        <label className="text-sm text-white/80">Ground Size</label>
                        <span className="text-xs text-white/60">{groundSize} units</span>
                      </div>
                      <Slider
                        disabled={isGroundInfinite}
                        min={10}
                        max={100}
                        step={5}
                        value={[groundSize]}
                        onValueChange={handleGroundSizeChange}
                      />
                    </div>
                    
                    {/* Infinite Ground Toggle */}
                    <div className="flex items-center justify-between">
                      <div>
                        <label className="text-sm text-white/80 flex items-center">
                          <FaInfinity className="mr-1.5" size={12} />
                          Infinite Ground
                        </label>
                        <p className="text-white/50 text-xs mt-0.5">Minecraft-style endless ground</p>
                      </div>
                      <Switch
                        checked={isGroundInfinite}
                        onCheckedChange={handleGroundInfiniteToggle}
                      />
                    </div>
                  </div>
                  
                  {/* Crosshair (Mira) Settings */}
                  <div className="bg-black/20 rounded-md overflow-hidden mt-4">
                    <div className="flex items-center justify-between p-2.5">
                      <div className="text-sm text-white/80 font-medium">Mira</div>
                      <div className="flex items-center">
                        <Switch 
                          checked={showCrosshair} 
                          onCheckedChange={setShowCrosshair} 
                          className="mr-2"
                        />
                        <button 
                          className={`flex items-center px-2 py-1 rounded text-xs ${showColorPicker === 'crosshair' ? 'bg-white/20' : 'bg-black/30 hover:bg-white/10'}`}
                          onClick={() => setShowColorPicker(showColorPicker === 'crosshair' ? null : 'crosshair')}
                          title="Selecionar cor da mira"
                          data-color-picker-btn="crosshair"
                        >
                          <div 
                            className="w-4 h-4 rounded-full mr-1.5 border border-white/30"
                            style={{ backgroundColor: crosshairColor }}
                          />
                          <span className="text-white/70">Cor</span>
                        </button>
                      </div>
                    </div>
                    
                    {showCrosshair && (
                      <div className="p-3 border-t border-white/10">
                        {/* Seletor de estilo da mira */}
                        <div className="mb-3">
                          <div className="flex justify-between items-center mb-1">
                            <span className="text-xs text-white/70">Estilo</span>
                          </div>
                          <div className="grid grid-cols-4 gap-2">
                            {[
                              { id: 'circle', label: 'C√≠rculo' },
                              { id: 'dot', label: 'Ponto' },
                              { id: 'cross', label: 'Cruz' },
                              { id: 'plus', label: 'Plus' }
                            ].map(style => (
                              <button
                                key={style.id}
                                className={`p-2 rounded text-xs flex flex-col items-center justify-center ${
                                  crosshairStyle === style.id 
                                    ? 'bg-white/20 border border-white/40' 
                                    : 'bg-black/30 border border-transparent hover:bg-white/10'
                                }`}
                                onClick={() => setCrosshairStyle(style.id)}
                              >
                                <div className="w-8 h-8 bg-black/40 rounded-sm mb-1 flex items-center justify-center">
                                  {style.id === 'circle' && (
                                    <div className="w-4 h-4 rounded-full border-2 border-white" />
                                  )}
                                  {style.id === 'dot' && (
                                    <div className="w-2 h-2 rounded-full bg-white" />
                                  )}
                                  {style.id === 'cross' && (
                                    <div className="relative w-6 h-6">
                                      <div className="absolute top-1/2 left-0 right-0 h-0.5 bg-white transform -translate-y-1/2" />
                                      <div className="absolute top-0 bottom-0 left-1/2 w-0.5 bg-white transform -translate-x-1/2" />
                                    </div>
                                  )}
                                  {style.id === 'plus' && (
                                    <div className="relative w-6 h-6">
                                      <div className="absolute top-1/2 left-0 w-2 h-0.5 bg-white transform -translate-y-1/2" />
                                      <div className="absolute top-1/2 right-0 w-2 h-0.5 bg-white transform -translate-y-1/2" />
                                      <div className="absolute top-0 left-1/2 h-2 w-0.5 bg-white transform -translate-x-1/2" />
                                      <div className="absolute bottom-0 left-1/2 h-2 w-0.5 bg-white transform -translate-x-1/2" />
                                    </div>
                                  )}
                                </div>
                                <span className="text-white/70">{style.label}</span>
                              </button>
                            ))}
                          </div>
                        </div>
                        
                        <div className="mb-3">
                          <div className="flex justify-between items-center mb-1">
                            <span className="text-xs text-white/70">Tamanho</span>
                            <span className="text-xs text-white/70">{crosshairSize}px</span>
                          </div>
                          <Slider 
                            value={[crosshairSize]} 
                            min={4} 
                            max={20} 
                            step={1} 
                            onValueChange={(value) => setCrosshairSize(value[0])} 
                          />
                        </div>
                        
                        <div>
                          <div className="flex justify-between items-center mb-1">
                            <span className="text-xs text-white/70">Espessura</span>
                            <span className="text-xs text-white/70">{crosshairThickness}px</span>
                          </div>
                          <Slider 
                            value={[crosshairThickness]} 
                            min={1} 
                            max={5} 
                            step={0.5} 
                            onValueChange={(value) => setCrosshairThickness(value[0])} 
                          />
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
            
            {/* Controls Tab Content - add gravity option here */}
            {activeTab === 'controles' && (
              <div className="space-y-3 animate-fadeIn">
                <div className="bg-white/5 rounded-lg p-3 space-y-2">
                  <h3 className="text-sm font-medium text-white/90 mb-2">Settings</h3>
                  
                  {/* Gravity Control - NEW */}
                  <div className="flex items-center justify-between bg-black/20 p-2 rounded-md">
                    <div>
                      <label className="text-xs text-white/80 block">Enable Gravity</label>
                      <p className="text-white/50 text-xs mt-0.5">Fall to the ground when active</p>
                    </div>
                    <Switch
                      checked={gravityEnabled}
                      onCheckedChange={setGravityEnabled}
                    />
                  </div>
                  
                  {/* Existing controls */}
                  <div className="flex items-center justify-between bg-black/20 p-2 rounded-md">
                    <div>
                      <label className="text-xs text-white/80 block">Enable Movement</label>
                      <p className="text-white/50 text-xs mt-0.5">Allow navigation in 3D space</p>
                    </div>
                    <Switch
                      checked={movementEnabled}
                      onCheckedChange={setMovementEnabled}
                    />
                  </div>
                  
                  <div className="flex items-center justify-between bg-black/20 p-2 rounded-md">
                    <div>
                      <label className="text-xs text-white/80 block">Show Frame Controls</label>
                      <p className="text-white/50 text-xs mt-0.5">Display website controls</p>
                    </div>
                    <Switch
                      checked={showFrameControls}
                      onCheckedChange={setShowFrameControls}
                    />
                  </div>
                  
                  <Button 
                    variant="outline" 
                    className="w-full justify-between p-2 mt-1 text-left text-xs hover:bg-white/10 transition-colors duration-200 border-white/10"
                    onClick={handleClearAllFrames}
                  >
                    <div>
                      <div className="font-medium text-xs text-white/80">Clear Frames</div>
                      <p className="text-white/50 text-xs mt-0.5">Remove all frames from the scene</p>
                    </div>
                    <FaChevronRight className="text-white/50 w-2 h-2" />
                  </Button>
                </div>
              </div>
            )}
          </div>
        </SettingsPanel>
      </div>
      
      {/* Color picker dropdown */}
      {showColorPicker === 'crosshair' && (
        <div 
          ref={el => colorPickerRefs.current.crosshair = el} 
          className="absolute right-20 top-20 z-50 bg-black/90 backdrop-blur-sm rounded-lg shadow-lg w-80 overflow-hidden"
          onClick={e => e.stopPropagation()}
        >
          <div className="p-3 border-b border-white/10">
            <div className="flex justify-between items-center">
              <span className="text-sm font-medium text-white/90">Cor da Mira</span>
              <div className="flex gap-2">
                <button 
                  className="bg-white/10 hover:bg-white/20 p-1.5 rounded text-white/80 flex items-center"
                  onClick={() => setShowColorPicker(null)}
                  title="Fechar seletor de cores"
                >
                  <FaTimes size={12} />
                </button>
              </div>
            </div>
          </div>
          
          {/* Pr√©via da mira com a cor atual */}
          <div className="p-3 border-b border-white/10">
            <div className="bg-black/30 rounded-md p-3 flex justify-center items-center">
              <div className="relative w-20 h-20 bg-black/50 rounded-md flex items-center justify-center">
                {crosshairStyle === 'circle' && (
                  <div 
                    className="rounded-full border"
                    style={{
                      width: `${crosshairSize}px`,
                      height: `${crosshairSize}px`,
                      borderWidth: `${crosshairThickness}px`,
                      borderColor: crosshairColor
                    }}
                  />
                )}
                {crosshairStyle === 'dot' && (
                  <div
                    className="rounded-full"
                    style={{
                      width: `${crosshairSize/2}px`,
                      height: `${crosshairSize/2}px`,
                      backgroundColor: crosshairColor
                    }}
                  />
                )}
                {crosshairStyle === 'cross' && (
                  <div className="relative">
                    <div 
                      style={{
                        position: 'absolute',
                        width: `${crosshairSize}px`,
                        height: `${crosshairThickness}px`,
                        backgroundColor: crosshairColor,
                        left: `${-crosshairSize/2}px`,
                        top: `${-crosshairThickness/2}px`
                      }}
                    />
                    <div 
                      style={{
                        position: 'absolute',
                        width: `${crosshairThickness}px`,
                        height: `${crosshairSize}px`,
                        backgroundColor: crosshairColor,
                        left: `${-crosshairThickness/2}px`,
                        top: `${-crosshairSize/2}px`
                      }}
                    />
                  </div>
                )}
                {crosshairStyle === 'plus' && (
                  <div className="relative">
                    {/* Representa√ß√£o do estilo plus */}
                    <div className="relative">
                      <div 
                        style={{
                          position: 'absolute',
                          width: `${crosshairSize/2 - crosshairSize/8}px`,
                          height: `${crosshairThickness}px`,
                          backgroundColor: crosshairColor,
                          right: `${crosshairSize/8 + crosshairThickness/2}px`,
                          top: `${-crosshairThickness/2}px`
                        }}
                      />
                      <div 
                        style={{
                          position: 'absolute',
                          width: `${crosshairSize/2 - crosshairSize/8}px`,
                          height: `${crosshairThickness}px`,
                          backgroundColor: crosshairColor,
                          left: `${crosshairSize/8 + crosshairThickness/2}px`,
                          top: `${-crosshairThickness/2}px`
                        }}
                      />
                      <div 
                        style={{
                          position: 'absolute',
                          width: `${crosshairThickness}px`,
                          height: `${crosshairSize/2 - crosshairSize/8}px`,
                          backgroundColor: crosshairColor,
                          left: `${-crosshairThickness/2}px`,
                          bottom: `${crosshairSize/8 + crosshairThickness/2}px`
                        }}
                      />
                      <div 
                        style={{
                          position: 'absolute',
                          width: `${crosshairThickness}px`,
                          height: `${crosshairSize/2 - crosshairSize/8}px`,
                          backgroundColor: crosshairColor,
                          left: `${-crosshairThickness/2}px`,
                          top: `${crosshairSize/8 + crosshairThickness/2}px`
                        }}
                      />
                    </div>
                  </div>
                )}
              </div>
              <div className="ml-3">
                <div className="text-xs text-white/70 mb-1">Pr√©via da Mira</div>
                <div className="text-xs text-white/50">{crosshairColor}</div>
              </div>
            </div>
          </div>
          
          <div className="p-3 border-b border-white/10">
            <div className="grid grid-cols-5 gap-2">
              {[
                'white', 'red', 'green', 'blue', 'yellow', 
                'cyan', 'magenta', 'orange', 'purple', 'pink',
                'lime', 'teal', 'indigo', 'gray', 'black'
              ].map(color => (
                <div 
                  key={color}
                  className={`w-full aspect-square rounded-full cursor-pointer border ${crosshairColor === color ? 'border-white border-2' : 'border-gray-600'}`}
                  style={{ backgroundColor: color }}
                  onClick={() => {
                    setCrosshairColor(color);
                  }}
                />
              ))}
            </div>
          </div>
          
          <div className="p-3">
            <div className="mb-2">
              <span className="text-xs text-white/70">Cores personalizadas</span>
            </div>
            <div className="border border-white/10 rounded-md p-2">
              <RgbaColorPicker 
                color={stringToRgba(crosshairColor)}
                onChange={(color) => {
                  setCrosshairColor(rgbaToString(color));
                }} 
                style={{ width: '100%' }}
              />
            </div>
            <div className="flex justify-end mt-2">
              <button 
                className="bg-white/10 hover:bg-white/20 px-3 py-1.5 rounded text-white/80 text-xs"
                onClick={() => {
                  setShowColorPicker(null);
                }}
              >
                Aplicar
              </button>
            </div>
          </div>
        </div>
      )}
      
      <Spotlight 
        onAddFrame={handleAddFrame}
        onVisibilityChange={handleSpotlightVisibility}
        showInput={true}
      />
      
      {currentMode === 'build' && !confirmedPosition && (
        <div className="fixed top-16 left-1/2 transform -translate-x-1/2 bg-blue-600 text-white px-4 py-2 rounded-full shadow-lg flex items-center">
          <span>
            {pendingWebsiteUrl ? "Move to position the website and click to confirm" : "Select a website from the catalog or use Cmd+B to open the catalog"}
          </span>
          {pendingWebsiteUrl && (
            <button 
              onClick={handleCancel}
              className="ml-3 bg-red-500 hover:bg-red-600 text-white rounded-full p-1"
              title="Cancel positioning (Esc)"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </button>
          )}
        </div>
      )}
      
      {currentMode === 'build' && confirmedPosition && (
        <div className="fixed top-16 left-1/2 transform -translate-x-1/2 bg-green-600 text-white px-4 py-2 rounded-full shadow-lg">
          {pendingWebsiteUrl ? "Website positioned! Choose another or press 1 to return to Live mode" : "Position confirmed!"}
        </div>
      )}
      
      {/* Adiciona a mira no centro da tela */}
      <Crosshair 
        visible={showCrosshair} 
        size={crosshairSize} 
        color={crosshairColor} 
        thickness={crosshairThickness} 
        style={crosshairStyle}
      />
    </div>
  );
};

export default Player;
